{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-09T08:56:24.823Z",
    "end": "2024-11-09T08:56:30.399Z",
    "duration": 5576,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2bf2da5b-8265-467d-9763-71217b496c49",
      "title": "",
      "fullFile": "cypress\\e2e\\apiTest.cy.js",
      "file": "cypress\\e2e\\apiTest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fdc99ce4-5bb5-4807-98cc-4d01938e1857",
          "title": "API Test Script",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dde67f0b-7d96-49b2-aabf-2d63dfd73233",
              "title": "Positive Test Cases",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new booking",
                  "fullTitle": "API Test Script Positive Test Cases should create a new booking",
                  "timedOut": null,
                  "duration": 1934,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bookingDetails = {\n  // Define the booking details\n  firstname: \"John\",\n  lastname: \"Doe\",\n  totalprice: 500,\n  depositpaid: true,\n  bookingdates: {\n    checkin: \"2024-08-01\",\n    checkout: \"2024-08-02\"\n  },\n  additionalneeds: \"groceries\"\n};\nbookingPage.createBooking(apiToken, bookingDetails).then(response => {\n  expect(response.status).to.equal(200); // Verify the response status is 200 (OK)\n  myBookingId = response.body.bookingid; // Store the booking ID from the response\n  cy.log(`Booking ID: ${myBookingId}`); // Log the booking ID for debugging purposes\n});",
                  "err": {},
                  "uuid": "1c126077-58f8-42e7-a1b2-838ce6f807fe",
                  "parentUUID": "dde67f0b-7d96-49b2-aabf-2d63dfd73233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should retrieve the created booking",
                  "fullTitle": "API Test Script Positive Test Cases should retrieve the created booking",
                  "timedOut": null,
                  "duration": 531,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "bookingPage.getBooking(apiToken, myBookingId).then(response => {\n  expect(response.status).to.equal(200); // Verify the response status is 200 (OK)\n  cy.log('Booking Details:', response.body); // Log the response body for debugging purposes\n  // Logging each key-value pair in the booking details to the Cypress console\n  Object.entries(response.body).forEach(([key, value]) => {\n    if (typeof value === 'object' && value !== null) {\n      Object.entries(value).forEach(([subKey, subValue]) => {\n        cy.log(`${subKey}: ${subValue}`);\n        console.log(`${subKey}: ${subValue}`);\n      });\n    } else {\n      cy.log(`${key}: ${value}`);\n    }\n  });\n});",
                  "err": {},
                  "uuid": "4774aadf-e0f1-44f2-8206-8ff627a88189",
                  "parentUUID": "dde67f0b-7d96-49b2-aabf-2d63dfd73233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the booking details",
                  "fullTitle": "API Test Script Positive Test Cases should update the booking details",
                  "timedOut": null,
                  "duration": 424,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedDetails = {\n  // Define the updated booking details\n  firstname: \"Jane\",\n  lastname: \"Deo\",\n  totalprice: 500,\n  depositpaid: true,\n  bookingdates: {\n    checkin: \"1999-04-15\",\n    checkout: \"1999-04-15\"\n  },\n  additionalneeds: \"books\"\n};\nbookingPage.updateBooking(apiToken, myBookingId, updatedDetails).then(response => {\n  expect(response.status).to.equal(200); // Verify the response status is 200 (OK)\n  cy.log('Updated Booking Details:', response.body); // Log the updated booking details for debugging purposes\n  Object.entries(response.body).forEach(([key, value]) => {\n    if (typeof value === 'object' && value !== null) {\n      Object.entries(value).forEach(([subKey, subValue]) => {\n        cy.log(`${subKey}: ${subValue}`);\n        console.log(`${subKey}: ${subValue}`);\n      });\n    } else {\n      cy.log(`${key}: ${value}`);\n    }\n  });\n});",
                  "err": {},
                  "uuid": "bc0d9059-bf74-4f18-9094-e16499cb32c5",
                  "parentUUID": "dde67f0b-7d96-49b2-aabf-2d63dfd73233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should delete the created booking",
                  "fullTitle": "API Test Script Positive Test Cases should delete the created booking",
                  "timedOut": null,
                  "duration": 380,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "bookingPage.deleteBooking(apiToken, myBookingId).then(response => {\n  expect(response.status).to.equal(201); // Verify the response status is 201\n});",
                  "err": {},
                  "uuid": "63316aa5-5060-45ca-8201-0016972e6c5a",
                  "parentUUID": "dde67f0b-7d96-49b2-aabf-2d63dfd73233",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c126077-58f8-42e7-a1b2-838ce6f807fe",
                "4774aadf-e0f1-44f2-8206-8ff627a88189",
                "bc0d9059-bf74-4f18-9094-e16499cb32c5",
                "63316aa5-5060-45ca-8201-0016972e6c5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3269,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce2f5d64-b7e7-432e-8a18-2635f8023cc9",
              "title": "Negative Test Cases",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not create a booking with missing fields",
                  "fullTitle": "API Test Script Negative Test Cases should not create a booking with missing fields",
                  "timedOut": null,
                  "duration": 349,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: '/booking',\n  body: {\n    totalprice: 500,\n    depositpaid: true\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(500); // Verify the response status is 500\n});",
                  "err": {},
                  "uuid": "f35b3775-9422-4d75-9cbe-2df99b164718",
                  "parentUUID": "ce2f5d64-b7e7-432e-8a18-2635f8023cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not retrieve a booking with an invalid ID",
                  "fullTitle": "API Test Script Negative Test Cases should not retrieve a booking with an invalid ID",
                  "timedOut": null,
                  "duration": 305,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/booking/999999',\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404); // Verify the response status is 404\n});",
                  "err": {},
                  "uuid": "bf18bab8-aea6-4748-b3b2-7a61f8ecb7d7",
                  "parentUUID": "ce2f5d64-b7e7-432e-8a18-2635f8023cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update a booking with an invalid token",
                  "fullTitle": "API Test Script Negative Test Cases should not update a booking with an invalid token",
                  "timedOut": null,
                  "duration": 299,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'PUT',\n  url: '/booking/792',\n  headers: {\n    'x-api-key': 'invalidToken123',\n    'Authorization': 'Basic YWRtaW46cGFzc3dvcmQxMjM='\n  },\n  body: {\n    firstname: 'Jane',\n    lastname: 'Doe',\n    totalprice: 500,\n    depositpaid: true,\n    bookingdates: {\n      checkin: '2024-08-01',\n      checkout: '2024-08-02'\n    },\n    additionalneeds: 'groceries'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(405); // Verify the response status is 405\n});",
                  "err": {},
                  "uuid": "516db85f-a519-4b0e-81d3-6e1f0b619718",
                  "parentUUID": "ce2f5d64-b7e7-432e-8a18-2635f8023cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete a booking with an invalid token",
                  "fullTitle": "API Test Script Negative Test Cases should not delete a booking with an invalid token",
                  "timedOut": null,
                  "duration": 364,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'DELETE',\n  url: '/booking/792',\n  headers: {\n    'x-api-key': 'invalidToken123',\n    'Authorization': 'Basic YWRtaW46cGFzc3dvcmQxMjM='\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(405); // Verify the response status is 405\n});",
                  "err": {},
                  "uuid": "b785db1e-e6d4-4af9-aa15-8aa4eee58806",
                  "parentUUID": "ce2f5d64-b7e7-432e-8a18-2635f8023cc9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f35b3775-9422-4d75-9cbe-2df99b164718",
                "bf18bab8-aea6-4748-b3b2-7a61f8ecb7d7",
                "516db85f-a519-4b0e-81d3-6e1f0b619718",
                "b785db1e-e6d4-4af9-aa15-8aa4eee58806"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1317,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}